generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// 用户表
model User {
  id             String             @id @default(cuid())
  name           String
  email          String             @unique
  password       String
  organizationId String?
  role           String             @default("REPORTER")
  active         Boolean            @default(true)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  organization   Organization?      @relation("PrimaryOrganization", fields: [organizationId], references: [id])
  organizations  UserOrganization[]

  @@index([organizationId])
  @@index([role])
  @@index([email])
}

// 角色枚举
enum Role {
  ADMIN
  REPORTER
  FINANCE
  AUDITOR
  OBSERVER
}
// 机构表
model Organization {
  id                   String             @id @default(cuid())
  name                 String
  code                 String             @unique
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  departments          Department[]
  projects             Project[]          @relation("PrimaryOrganization")
  users                User[]             @relation("PrimaryOrganization")
  userOrganizations    UserOrganization[]
  projectOrganizations Project[]          @relation("ProjectOrganizations")

  @@index([name])
  @@index([code])
}

// 部门表
model Department {
  id             String       @id @default(cuid())
  name           String
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  projects       Project[]    @relation("DepartmentToProject")

  @@index([organizationId])
  @@index([name])
}

// 项目状态枚举
enum ProjectStatus {
  ACTIVE
  ARCHIVED
}

// 项目表
model Project {
  id             String         @id @default(cuid())
  name           String
  status         String         @default("ACTIVE")
  startYear      Int
  hasRecords     Boolean        @default(false)
  organizationId String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  code           String?
  organization   Organization   @relation("PrimaryOrganization", fields: [organizationId], references: [id])
  subProjects    SubProject[]
  departments    Department[]   @relation("DepartmentToProject")
  organizations  Organization[] @relation("ProjectOrganizations")

  @@unique([name, organizationId], name: "projectNameOrg")
  @@index([name])
  @@index([code])
  @@index([status])
  @@index([startYear])
  @@index([organizationId])
}

// 子项目表
model SubProject {
  id        String     @id @default(cuid())
  name      String
  projectId String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  records   Record[]
  project   Project    @relation(fields: [projectId], references: [id])
  fundTypes FundType[] @relation("FundTypeToSubProject")

  @@index([projectId])
  @@index([name])
}

model FundType {
  id          String       @id @default(cuid())
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  subProjects SubProject[] @relation("FundTypeToSubProject")

  @@index([name])
}

// 记录表
model Record {
  id                  String             @id @default(cuid())
  subProjectId        String
  year                Int
  month               Int
  predicted           Float?
  actualUser          Float?
  actualFinance       Float?
  auditResult         Float?
  status              String
  submittedBy         String
  submittedAt         DateTime?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  remark              String?
  predictUserStatus   String             @default("draft")
  actualUserStatus    String             @default("draft")
  actualFinanceStatus String             @default("draft")
  auditFinanceStatus  String             @default("draft")
  subProject          SubProject         @relation(fields: [subProjectId], references: [id])
  auditLogs           RecordAudit[]
  withdrawalRequest   WithdrawalRequest?

  @@unique([subProjectId, year, month])
  @@index([subProjectId])
  @@index([year])
  @@index([month])
  @@index([status])
  @@index([predictUserStatus])
  @@index([actualUserStatus])
  @@index([actualFinanceStatus])
  @@index([auditFinanceStatus])
  @@index([submittedBy])
  @@index([submittedAt])
}

//填报记录审计表
model RecordAudit {
  id        String   @id @default(cuid())
  recordId  String
  userId    String
  action    String
  timestamp DateTime @default(now())
  oldValue  String?
  newValue  String?
  role      String
  remarks   String?
  createdAt DateTime @default(now())
  record    Record   @relation(fields: [recordId], references: [id])

  @@index([recordId])
  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@index([role])
}

// 审计日志表
model AuditLog {
  id          String   @id @default(cuid())
  userId      String
  action      String
  resource    String
  resourceId  String?
  permissions String?
  result      Boolean
  error       String?
  duration    Int?
  timestamp   DateTime
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([timestamp])
}

// 用户-机构多对多关联表
model UserOrganization {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

// 添加撤回申请表
model WithdrawalRequest {
  id           String   @id @default(cuid())
  recordId     String   @unique
  requesterId  String
  reason       String
  status       String
  adminId      String?
  adminComment String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  record       Record   @relation(fields: [recordId], references: [id])

  @@index([recordId])
  @@index([requesterId])
  @@index([status])
  @@index([createdAt])
}
