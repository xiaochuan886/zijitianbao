generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// 用户表
model User {
  id                 String             @id @default(cuid())
  name               String
  email              String             @unique
  password           String
  organizationId     String?
  role               String             @default("REPORTER")
  active             Boolean            @default(true)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  organization       Organization?      @relation("PrimaryOrganization", fields: [organizationId], references: [id])
  organizations      UserOrganization[]
  predictRecords     PredictRecord[]    @relation("UserPredictRecords")
  actualUserRecords  ActualUserRecord[] @relation("UserActualRecords")
  actualFinRecords   ActualFinRecord[]  @relation("UserActualFinRecords")
  auditRecords       AuditRecord[]      @relation("UserAuditRecords")
  withdrawalRequests WithdrawalRequest[] @relation("UserWithdrawalRequests")

  @@index([organizationId])
  @@index([role])
  @@index([email])
}

// 角色枚举
enum Role {
  ADMIN
  REPORTER
  FINANCE
  AUDITOR
  OBSERVER
}

// 机构表
model Organization {
  id                   String             @id @default(cuid())
  name                 String
  code                 String             @unique
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  departments          Department[]
  projects             Project[]          @relation("PrimaryOrganization")
  users                User[]             @relation("PrimaryOrganization")
  userOrganizations    UserOrganization[]
  projectOrganizations Project[]          @relation("ProjectOrganizations")
  projectCategories    ProjectCategory[]  @relation("OrganizationCategories")

  @@index([name])
  @@index([code])
}

// 部门表
model Department {
  id             String       @id @default(cuid())
  name           String
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  projects       Project[]    @relation("DepartmentToProject")

  @@index([organizationId])
  @@index([name])
}

// 项目分类表 (新增)
model ProjectCategory {
  id             String       @id @default(cuid())
  name           String
  code           String?
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation("OrganizationCategories", fields: [organizationId], references: [id])
  projects       Project[]    @relation("CategoryToProject")

  @@unique([name, organizationId], name: "categorynameOrg")
  @@index([organizationId])
  @@index([name])
  @@index([code])
}

// 项目状态枚举
enum ProjectStatus {
  ACTIVE
  ARCHIVED
}

// 项目表
model Project {
  id             String         @id @default(cuid())
  name           String
  status         String         @default("ACTIVE")
  startYear      Int
  hasRecords     Boolean        @default(false)
  organizationId String
  categoryId     String?        // 新增项目分类ID字段
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  code           String?
  organization   Organization   @relation("PrimaryOrganization", fields: [organizationId], references: [id])
  category       ProjectCategory? @relation("CategoryToProject", fields: [categoryId], references: [id]) // 新增项目分类关联
  subProjects    SubProject[]
  departments    Department[]   @relation("DepartmentToProject")
  organizations  Organization[] @relation("ProjectOrganizations")

  @@unique([name, organizationId], name: "projectNameOrg")
  @@index([name])
  @@index([code])
  @@index([status])
  @@index([startYear])
  @@index([organizationId])
  @@index([categoryId]) // 新增索引
}

// 子项目表
model SubProject {
  id                String            @id @default(cuid())
  name              String
  projectId         String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  project           Project           @relation(fields: [projectId], references: [id])
  fundTypes         FundType[]        @relation("FundTypeToSubProject")
  predictRecords    PredictRecord[]
  actualUserRecords ActualUserRecord[]
  actualFinRecords  ActualFinRecord[]
  auditRecords      AuditRecord[]

  @@index([projectId])
  @@index([name])
}

model FundType {
  id                String               @id @default(cuid())
  name              String
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  subProjects       SubProject[]         @relation("FundTypeToSubProject")
  predictRecords    PredictRecord[]      // 添加与预测记录的反向关联
  actualUserRecords ActualUserRecord[]   // 添加与实际用户记录的反向关联
  actualFinRecords  ActualFinRecord[]    // 添加与实际财务记录的反向关联
  auditRecords      AuditRecord[]        // 添加与审计记录的反向关联

  @@index([name])
}

// 记录状态枚举
enum RecordStatus {
  DRAFT       // 草稿
  UNFILLED    // 未填写
  SUBMITTED   // 已提交
  PENDING_WITHDRAWAL // 撤回审核中
  APPROVED    // 已审核通过
  REJECTED    // 已拒绝
}

// 资金需求预测记录表
model PredictRecord {
  id                String             @id @default(cuid())
  subProjectId      String
  fundTypeId        String              // 添加资金需求类型ID字段
  year              Int
  month             Int
  amount            Float?             // 预测金额
  status            RecordStatus       @default(DRAFT)
  remark            String?            // 备注
  submittedBy       String?
  submittedAt       DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  subProject        SubProject         @relation(fields: [subProjectId], references: [id])
  fundType          FundType           @relation(fields: [fundTypeId], references: [id])   // 添加与FundType的关系
  user              User?              @relation("UserPredictRecords", fields: [submittedBy], references: [id])
  auditLogs         RecordAudit[]      @relation("PredictRecordAudits")
  withdrawalRequest WithdrawalRequest? @relation("PredictWithdrawalRequests")

  @@unique([subProjectId, fundTypeId, year, month])  // 更新唯一约束
  @@index([subProjectId])
  @@index([fundTypeId])  // 添加索引
  @@index([year])
  @@index([month])
  @@index([status])
  @@index([submittedBy])
  @@index([submittedAt])
}

// 实际支付填报人记录表
model ActualUserRecord {
  id                String             @id @default(cuid())
  subProjectId      String
  fundTypeId        String              // 添加资金需求类型ID字段
  year              Int
  month             Int
  amount            Float?             // 填报人填报的实际金额
  status            RecordStatus       @default(DRAFT)
  remark            String?            // 备注
  submittedBy       String?
  submittedAt       DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  subProject        SubProject         @relation(fields: [subProjectId], references: [id])
  fundType          FundType           @relation(fields: [fundTypeId], references: [id])   // 添加与FundType的关系
  user              User?              @relation("UserActualRecords", fields: [submittedBy], references: [id])
  auditLogs         RecordAudit[]      @relation("ActualUserRecordAudits")
  withdrawalRequest WithdrawalRequest? @relation("ActualUserWithdrawalRequests")
  // 关联到财务填报记录
  financeRecord     ActualFinRecord?   @relation("UserToFinanceRecord")

  @@unique([subProjectId, fundTypeId, year, month])  // 更新唯一约束
  @@index([subProjectId])
  @@index([fundTypeId])  // 添加索引
  @@index([year])
  @@index([month])
  @@index([status])
  @@index([submittedBy])
  @@index([submittedAt])
}

// 实际支付财务填报记录表
model ActualFinRecord {
  id                String             @id @default(cuid())
  subProjectId      String
  fundTypeId        String              // 添加资金需求类型ID字段
  year              Int
  month             Int
  amount            Float?             // 财务填报的实际金额
  status            RecordStatus       @default(DRAFT)
  remark            String?            // 备注
  submittedBy       String?
  submittedAt       DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  userRecordId      String?            @unique // 关联到填报人记录
  subProject        SubProject         @relation(fields: [subProjectId], references: [id])
  fundType          FundType           @relation(fields: [fundTypeId], references: [id])   // 添加与FundType的关系
  user              User?              @relation("UserActualFinRecords", fields: [submittedBy], references: [id])
  userRecord        ActualUserRecord?  @relation("UserToFinanceRecord", fields: [userRecordId], references: [id])
  auditLogs         RecordAudit[]      @relation("ActualFinRecordAudits")
  withdrawalRequest WithdrawalRequest? @relation("ActualFinWithdrawalRequests")
  // 关联到审核记录
  auditRecord       AuditRecord?       @relation("FinanceToAuditRecord")

  @@unique([subProjectId, fundTypeId, year, month])  // 更新唯一约束
  @@index([subProjectId])
  @@index([fundTypeId])  // 添加索引
  @@index([year])
  @@index([month])
  @@index([status])
  @@index([submittedBy])
  @@index([submittedAt])
  @@index([userRecordId])
}

// 审核财务最终审核记录表
model AuditRecord {
  id                String             @id @default(cuid())
  subProjectId      String
  fundTypeId        String              // 添加资金需求类型ID字段
  year              Int
  month             Int
  amount            Float?             // 审核后的最终金额
  status            RecordStatus       @default(DRAFT)
  remark            String?            // 审核备注
  submittedBy       String?
  submittedAt       DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  financeRecordId   String?            @unique // 关联到财务填报记录
  subProject        SubProject         @relation(fields: [subProjectId], references: [id])
  fundType          FundType           @relation(fields: [fundTypeId], references: [id])   // 添加与FundType的关系
  user              User?              @relation("UserAuditRecords", fields: [submittedBy], references: [id])
  financeRecord     ActualFinRecord?   @relation("FinanceToAuditRecord", fields: [financeRecordId], references: [id])
  auditLogs         RecordAudit[]      @relation("AuditRecordAudits")
  withdrawalRequest WithdrawalRequest? @relation("AuditWithdrawalRequests")

  @@unique([subProjectId, fundTypeId, year, month])  // 更新唯一约束
  @@index([subProjectId])
  @@index([fundTypeId])  // 添加索引
  @@index([year])
  @@index([month])
  @@index([status])
  @@index([submittedBy])
  @@index([submittedAt])
  @@index([financeRecordId])
}

// 填报记录审计表
model RecordAudit {
  id                 String           @id @default(cuid())
  predictRecordId    String?
  actualUserRecordId String?
  actualFinRecordId  String?
  auditRecordId      String?
  userId             String
  action             String
  timestamp          DateTime         @default(now())
  oldValue           String?
  newValue           String?
  role               String
  remarks            String?
  createdAt          DateTime         @default(now())
  predictRecord      PredictRecord?   @relation("PredictRecordAudits", fields: [predictRecordId], references: [id])
  actualUserRecord   ActualUserRecord? @relation("ActualUserRecordAudits", fields: [actualUserRecordId], references: [id])
  actualFinRecord    ActualFinRecord? @relation("ActualFinRecordAudits", fields: [actualFinRecordId], references: [id])
  auditRecord        AuditRecord?     @relation("AuditRecordAudits", fields: [auditRecordId], references: [id])

  @@index([predictRecordId])
  @@index([actualUserRecordId])
  @@index([actualFinRecordId])
  @@index([auditRecordId])
  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@index([role])
}

// 审计日志表
model AuditLog {
  id          String   @id @default(cuid())
  userId      String
  action      String
  resource    String
  resourceId  String?
  permissions String?
  result      Boolean
  error       String?
  duration    Int?
  timestamp   DateTime
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([timestamp])
}

// 用户-机构多对多关联表
model UserOrganization {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

// 撤回申请表
model WithdrawalRequest {
  id                 String           @id @default(cuid())
  predictRecordId    String?          @unique
  actualUserRecordId String?          @unique
  actualFinRecordId  String?          @unique
  auditRecordId      String?          @unique
  requesterId        String
  reason             String
  status             String
  adminId            String?
  adminComment       String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  predictRecord      PredictRecord?   @relation("PredictWithdrawalRequests", fields: [predictRecordId], references: [id])
  actualUserRecord   ActualUserRecord? @relation("ActualUserWithdrawalRequests", fields: [actualUserRecordId], references: [id])
  actualFinRecord    ActualFinRecord? @relation("ActualFinWithdrawalRequests", fields: [actualFinRecordId], references: [id])
  auditRecord        AuditRecord?     @relation("AuditWithdrawalRequests", fields: [auditRecordId], references: [id])
  requester          User             @relation("UserWithdrawalRequests", fields: [requesterId], references: [id])

  @@index([predictRecordId])
  @@index([actualUserRecordId])
  @@index([actualFinRecordId])
  @@index([auditRecordId])
  @@index([requesterId])
  @@index([status])
  @@index([createdAt])
}